
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_storage_bucket_object.providers["1-resman-folder-sandbox"] will be created
  + resource "google_storage_bucket_object" "providers" {
      + bucket         = "ff-pcg-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + generation     = (known after apply)
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + md5hexhash     = (known after apply)
      + media_link     = (known after apply)
      + name           = "providers/1-resman-folder-sandbox-providers.tf"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # google_storage_bucket_object.providers["2-networking"] will be created
  + resource "google_storage_bucket_object" "providers" {
      + bucket         = "ff-pcg-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + generation     = (known after apply)
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + md5hexhash     = (known after apply)
      + media_link     = (known after apply)
      + name           = "providers/2-networking-providers.tf"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # google_storage_bucket_object.providers["2-networking-r"] will be created
  + resource "google_storage_bucket_object" "providers" {
      + bucket         = "ff-pcg-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + generation     = (known after apply)
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + md5hexhash     = (known after apply)
      + media_link     = (known after apply)
      + name           = "providers/2-networking-r-providers.tf"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # google_storage_bucket_object.providers["2-project-factory"] will be created
  + resource "google_storage_bucket_object" "providers" {
      + bucket         = "ff-pcg-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + generation     = (known after apply)
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + md5hexhash     = (known after apply)
      + media_link     = (known after apply)
      + name           = "providers/2-project-factory-providers.tf"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # google_storage_bucket_object.providers["2-project-factory-r"] will be created
  + resource "google_storage_bucket_object" "providers" {
      + bucket         = "ff-pcg-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + generation     = (known after apply)
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + md5hexhash     = (known after apply)
      + media_link     = (known after apply)
      + name           = "providers/2-project-factory-r-providers.tf"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # google_storage_bucket_object.providers["2-security"] will be created
  + resource "google_storage_bucket_object" "providers" {
      + bucket         = "ff-pcg-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + generation     = (known after apply)
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + md5hexhash     = (known after apply)
      + media_link     = (known after apply)
      + name           = "providers/2-security-providers.tf"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # google_storage_bucket_object.providers["2-security-r"] will be created
  + resource "google_storage_bucket_object" "providers" {
      + bucket         = "ff-pcg-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + generation     = (known after apply)
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + md5hexhash     = (known after apply)
      + media_link     = (known after apply)
      + name           = "providers/2-security-r-providers.tf"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # google_storage_bucket_object.tfvars will be created
  + resource "google_storage_bucket_object" "tfvars" {
      + bucket         = "ff-pcg-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + generation     = (known after apply)
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + md5hexhash     = (known after apply)
      + media_link     = (known after apply)
      + name           = "tfvars/1-resman.auto.tfvars.json"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # module.organization[0].google_organization_iam_member.bindings["sa_net_ro_fw_policy_user"] will be created
  + resource "google_organization_iam_member" "bindings" {
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:ff-pcg-prod-resman-net-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + org_id = "512849875460"
      + role   = "roles/compute.orgFirewallPolicyUser"
    }

  # module.organization[0].google_organization_iam_member.bindings["sa_net_ro_ngfw_enterprise_viewer"] will be created
  + resource "google_organization_iam_member" "bindings" {
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:ff-pcg-prod-resman-net-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + org_id = "512849875460"
      + role   = "organizations/512849875460/roles/ngfwEnterpriseViewer"
    }

  # module.organization[0].google_organization_iam_member.bindings["sa_net_rw_fw_policy_admin"] will be created
  + resource "google_organization_iam_member" "bindings" {
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + org_id = "512849875460"
      + role   = "roles/compute.orgFirewallPolicyAdmin"
    }

  # module.organization[0].google_organization_iam_member.bindings["sa_net_rw_ngfw_enterprise_admin"] will be created
  + resource "google_organization_iam_member" "bindings" {
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + org_id = "512849875460"
      + role   = "organizations/512849875460/roles/ngfwEnterpriseAdmin"
    }

  # module.organization[0].google_organization_iam_member.bindings["sa_net_rw_xpn_admin"] will be created
  + resource "google_organization_iam_member" "bindings" {
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + org_id = "512849875460"
      + role   = "roles/compute.xpnAdmin"
    }

  # module.organization[0].google_organization_iam_member.bindings["sa_pf_conditional_org_policy"] will be created
  + resource "google_organization_iam_member" "bindings" {
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + org_id = "512849875460"
      + role   = "roles/orgpolicy.policyAdmin"

      + condition {
          + description = "Org policy tag scoped grant for project factory."
          + expression  = <<-EOT
                resource.matchTag('512849875460/context', 'project-factory')
            EOT
          + title       = "org_policy_tag_pf_scoped"
        }
    }

  # module.organization[0].google_organization_iam_member.bindings["sa_sec_cloudasset"] will be created
  + resource "google_organization_iam_member" "bindings" {
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:ff-pcg-prod-resman-sec-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + org_id = "512849875460"
      + role   = "roles/cloudasset.viewer"
    }

  # module.organization[0].google_tags_tag_key.default["context"] will be created
  + resource "google_tags_tag_key" "default" {
      + create_time     = (known after apply)
      + description     = "Resource management context."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = "organizations/512849875460"
      + short_name      = "context"
      + update_time     = (known after apply)
    }

  # module.organization[0].google_tags_tag_key.default["environment"] will be created
  + resource "google_tags_tag_key" "default" {
      + create_time     = (known after apply)
      + description     = "Environment definition."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = "organizations/512849875460"
      + short_name      = "environment"
      + update_time     = (known after apply)
    }

  # module.organization[0].google_tags_tag_value.default["context/networking"] will be created
  + resource "google_tags_tag_value" "default" {
      + create_time     = (known after apply)
      + description     = "Managed by the Terraform organization module."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = (known after apply)
      + short_name      = "networking"
      + update_time     = (known after apply)
    }

  # module.organization[0].google_tags_tag_value.default["context/project-factory"] will be created
  + resource "google_tags_tag_value" "default" {
      + create_time     = (known after apply)
      + description     = "Managed by the Terraform organization module."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = (known after apply)
      + short_name      = "project-factory"
      + update_time     = (known after apply)
    }

  # module.organization[0].google_tags_tag_value.default["context/sandbox"] will be created
  + resource "google_tags_tag_value" "default" {
      + create_time     = (known after apply)
      + description     = "Managed by the Terraform organization module."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = (known after apply)
      + short_name      = "sandbox"
      + update_time     = (known after apply)
    }

  # module.organization[0].google_tags_tag_value.default["context/security"] will be created
  + resource "google_tags_tag_value" "default" {
      + create_time     = (known after apply)
      + description     = "Managed by the Terraform organization module."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = (known after apply)
      + short_name      = "security"
      + update_time     = (known after apply)
    }

  # module.organization[0].google_tags_tag_value.default["environment/development"] will be created
  + resource "google_tags_tag_value" "default" {
      + create_time     = (known after apply)
      + description     = "Managed by the Terraform organization module."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = (known after apply)
      + short_name      = "development"
      + update_time     = (known after apply)
    }

  # module.organization[0].google_tags_tag_value.default["environment/production"] will be created
  + resource "google_tags_tag_value" "default" {
      + create_time     = (known after apply)
      + description     = "Managed by the Terraform organization module."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = (known after apply)
      + short_name      = "production"
      + update_time     = (known after apply)
    }

  # module.organization[0].google_tags_tag_value_iam_binding.default["environment/development:roles/resourcemanager.tagUser"] will be created
  + resource "google_tags_tag_value_iam_binding" "default" {
      + etag      = (known after apply)
      + id        = (known after apply)
      + members   = [
          + "serviceAccount:ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
          + "serviceAccount:ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
          + "serviceAccount:ff-pcg-prod-resman-sec-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role      = "roles/resourcemanager.tagUser"
      + tag_value = (known after apply)
    }

  # module.organization[0].google_tags_tag_value_iam_binding.default["environment/development:roles/resourcemanager.tagViewer"] will be created
  + resource "google_tags_tag_value_iam_binding" "default" {
      + etag      = (known after apply)
      + id        = (known after apply)
      + members   = [
          + "serviceAccount:ff-pcg-prod-resman-net-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
          + "serviceAccount:ff-pcg-prod-resman-pf-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
          + "serviceAccount:ff-pcg-prod-resman-sec-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role      = "roles/resourcemanager.tagViewer"
      + tag_value = (known after apply)
    }

  # module.organization[0].google_tags_tag_value_iam_binding.default["environment/production:roles/resourcemanager.tagUser"] will be created
  + resource "google_tags_tag_value_iam_binding" "default" {
      + etag      = (known after apply)
      + id        = (known after apply)
      + members   = [
          + "serviceAccount:ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
          + "serviceAccount:ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
          + "serviceAccount:ff-pcg-prod-resman-sec-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role      = "roles/resourcemanager.tagUser"
      + tag_value = (known after apply)
    }

  # module.organization[0].google_tags_tag_value_iam_binding.default["environment/production:roles/resourcemanager.tagViewer"] will be created
  + resource "google_tags_tag_value_iam_binding" "default" {
      + etag      = (known after apply)
      + id        = (known after apply)
      + members   = [
          + "serviceAccount:ff-pcg-prod-resman-net-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
          + "serviceAccount:ff-pcg-prod-resman-pf-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
          + "serviceAccount:ff-pcg-prod-resman-sec-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role      = "roles/resourcemanager.tagViewer"
      + tag_value = (known after apply)
    }

  # module.stage2-bucket["networking"].google_storage_bucket.bucket[0] will be created
  + resource "google_storage_bucket" "bucket" {
      + effective_labels            = {
          + "goog-terraform-provisioned" = "true"
        }
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "EU"
      + name                        = "ff-pcg-prod-resman-net-0"
      + project                     = "ff-pcg-prod-iac-core-0"
      + project_number              = (known after apply)
      + public_access_prevention    = (known after apply)
      + rpo                         = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + terraform_labels            = {
          + "goog-terraform-provisioned" = "true"
        }
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + soft_delete_policy (known after apply)

      + versioning {
          + enabled = true
        }

      + website (known after apply)
    }

  # module.stage2-bucket["networking"].google_storage_bucket_iam_binding.authoritative["roles/storage.objectAdmin"] will be created
  + resource "google_storage_bucket_iam_binding" "authoritative" {
      + bucket  = "ff-pcg-prod-resman-net-0"
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/storage.objectAdmin"
    }

  # module.stage2-bucket["networking"].google_storage_bucket_iam_binding.authoritative["roles/storage.objectViewer"] will be created
  + resource "google_storage_bucket_iam_binding" "authoritative" {
      + bucket  = "ff-pcg-prod-resman-net-0"
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-net-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/storage.objectViewer"
    }

  # module.stage2-bucket["project-factory"].google_storage_bucket.bucket[0] will be created
  + resource "google_storage_bucket" "bucket" {
      + effective_labels            = {
          + "goog-terraform-provisioned" = "true"
        }
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "EU"
      + name                        = "ff-pcg-prod-resman-pf-0"
      + project                     = "ff-pcg-prod-iac-core-0"
      + project_number              = (known after apply)
      + public_access_prevention    = (known after apply)
      + rpo                         = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + terraform_labels            = {
          + "goog-terraform-provisioned" = "true"
        }
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + soft_delete_policy (known after apply)

      + versioning {
          + enabled = true
        }

      + website (known after apply)
    }

  # module.stage2-bucket["project-factory"].google_storage_bucket_iam_binding.authoritative["roles/storage.objectAdmin"] will be created
  + resource "google_storage_bucket_iam_binding" "authoritative" {
      + bucket  = "ff-pcg-prod-resman-pf-0"
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/storage.objectAdmin"
    }

  # module.stage2-bucket["project-factory"].google_storage_bucket_iam_binding.authoritative["roles/storage.objectViewer"] will be created
  + resource "google_storage_bucket_iam_binding" "authoritative" {
      + bucket  = "ff-pcg-prod-resman-pf-0"
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/storage.objectViewer"
    }

  # module.stage2-bucket["security"].google_storage_bucket.bucket[0] will be created
  + resource "google_storage_bucket" "bucket" {
      + effective_labels            = {
          + "goog-terraform-provisioned" = "true"
        }
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "EU"
      + name                        = "ff-pcg-prod-resman-sec-0"
      + project                     = "ff-pcg-prod-iac-core-0"
      + project_number              = (known after apply)
      + public_access_prevention    = (known after apply)
      + rpo                         = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + terraform_labels            = {
          + "goog-terraform-provisioned" = "true"
        }
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + soft_delete_policy (known after apply)

      + versioning {
          + enabled = true
        }

      + website (known after apply)
    }

  # module.stage2-bucket["security"].google_storage_bucket_iam_binding.authoritative["roles/storage.objectAdmin"] will be created
  + resource "google_storage_bucket_iam_binding" "authoritative" {
      + bucket  = "ff-pcg-prod-resman-sec-0"
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-sec-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/storage.objectAdmin"
    }

  # module.stage2-bucket["security"].google_storage_bucket_iam_binding.authoritative["roles/storage.objectViewer"] will be created
  + resource "google_storage_bucket_iam_binding" "authoritative" {
      + bucket  = "ff-pcg-prod-resman-sec-0"
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-sec-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/storage.objectViewer"
    }

  # module.stage2-folder["networking"].google_folder.folder[0] will be created
  + resource "google_folder" "folder" {
      + create_time         = (known after apply)
      + deletion_protection = false
      + display_name        = "Networking"
      + folder_id           = (known after apply)
      + id                  = (known after apply)
      + lifecycle_state     = (known after apply)
      + name                = (known after apply)
      + parent              = "organizations/512849875460"
    }

  # module.stage2-folder["networking"].google_folder_iam_binding.authoritative["organizations/512849875460/roles/projectIamViewer"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "organizations/512849875460/roles/projectIamViewer"
    }

  # module.stage2-folder["networking"].google_folder_iam_binding.authoritative["organizations/512849875460/roles/serviceProjectNetworkAdmin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "organizations/512849875460/roles/serviceProjectNetworkAdmin"
    }

  # module.stage2-folder["networking"].google_folder_iam_binding.authoritative["roles/compute.networkViewer"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/compute.networkViewer"
    }

  # module.stage2-folder["networking"].google_folder_iam_binding.authoritative["roles/compute.xpnAdmin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/compute.xpnAdmin"
    }

  # module.stage2-folder["networking"].google_folder_iam_binding.authoritative["roles/editor"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "group:gcp-vpc-network-admins@fabric-fast.trygoo.gl",
        ]
      + role    = "roles/editor"
    }

  # module.stage2-folder["networking"].google_folder_iam_binding.authoritative["roles/logging.admin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/logging.admin"
    }

  # module.stage2-folder["networking"].google_folder_iam_binding.authoritative["roles/owner"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/owner"
    }

  # module.stage2-folder["networking"].google_folder_iam_binding.authoritative["roles/resourcemanager.folderAdmin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.folderAdmin"
    }

  # module.stage2-folder["networking"].google_folder_iam_binding.authoritative["roles/resourcemanager.folderViewer"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-net-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.folderViewer"
    }

  # module.stage2-folder["networking"].google_folder_iam_binding.authoritative["roles/resourcemanager.projectCreator"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.projectCreator"
    }

  # module.stage2-folder["networking"].google_folder_iam_binding.authoritative["roles/resourcemanager.tagUser"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.tagUser"
    }

  # module.stage2-folder["networking"].google_folder_iam_binding.authoritative["roles/resourcemanager.tagViewer"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-net-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.tagViewer"
    }

  # module.stage2-folder["networking"].google_folder_iam_binding.authoritative["roles/viewer"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-net-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/viewer"
    }

  # module.stage2-folder["networking"].google_folder_iam_binding.bindings["project_factory"] will be created
  + resource "google_folder_iam_binding" "bindings" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.projectIamAdmin"

      + condition {
          + expression = <<-EOT
                api.getAttribute('iam.googleapis.com/modifiedGrantsByRole', []).hasOnly([
                  'roles/compute.networkUser', 'roles/composer.sharedVpcAgent',
                  'roles/container.hostServiceAgentUser', 'roles/vpcaccess.user'
                ])
            EOT
          + title      = "Project factory delegated IAM grant."
        }
    }

  # module.stage2-folder["networking"].google_tags_tag_binding.binding["context"] will be created
  + resource "google_tags_tag_binding" "binding" {
      + id        = (known after apply)
      + name      = (known after apply)
      + parent    = (known after apply)
      + tag_value = (known after apply)
    }

  # module.stage2-folder["security"].google_folder.folder[0] will be created
  + resource "google_folder" "folder" {
      + create_time         = (known after apply)
      + deletion_protection = false
      + display_name        = "Security"
      + folder_id           = (known after apply)
      + id                  = (known after apply)
      + lifecycle_state     = (known after apply)
      + name                = (known after apply)
      + parent              = "organizations/512849875460"
    }

  # module.stage2-folder["security"].google_folder_iam_binding.authoritative["organizations/512849875460/roles/projectIamViewer"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "organizations/512849875460/roles/projectIamViewer"
    }

  # module.stage2-folder["security"].google_folder_iam_binding.authoritative["roles/cloudkms.cryptoKeyEncrypterDecrypter"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/cloudkms.cryptoKeyEncrypterDecrypter"
    }

  # module.stage2-folder["security"].google_folder_iam_binding.authoritative["roles/cloudkms.viewer"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/cloudkms.viewer"
    }

  # module.stage2-folder["security"].google_folder_iam_binding.authoritative["roles/editor"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "group:gcp-security-admins@fabric-fast.trygoo.gl",
        ]
      + role    = "roles/editor"
    }

  # module.stage2-folder["security"].google_folder_iam_binding.authoritative["roles/logging.admin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-sec-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/logging.admin"
    }

  # module.stage2-folder["security"].google_folder_iam_binding.authoritative["roles/owner"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-sec-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/owner"
    }

  # module.stage2-folder["security"].google_folder_iam_binding.authoritative["roles/resourcemanager.folderAdmin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-sec-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.folderAdmin"
    }

  # module.stage2-folder["security"].google_folder_iam_binding.authoritative["roles/resourcemanager.folderViewer"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-sec-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.folderViewer"
    }

  # module.stage2-folder["security"].google_folder_iam_binding.authoritative["roles/resourcemanager.projectCreator"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-sec-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.projectCreator"
    }

  # module.stage2-folder["security"].google_folder_iam_binding.authoritative["roles/resourcemanager.tagUser"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-sec-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.tagUser"
    }

  # module.stage2-folder["security"].google_folder_iam_binding.authoritative["roles/resourcemanager.tagViewer"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-sec-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.tagViewer"
    }

  # module.stage2-folder["security"].google_folder_iam_binding.authoritative["roles/viewer"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-sec-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/viewer"
    }

  # module.stage2-folder["security"].google_folder_iam_binding.bindings["project_factory"] will be created
  + resource "google_folder_iam_binding" "bindings" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.projectIamAdmin"

      + condition {
          + expression = <<-EOT
                api.getAttribute('iam.googleapis.com/modifiedGrantsByRole', []).hasOnly([
                  'roles/cloudkms.cryptoKeyEncrypterDecrypter'
                ])
            EOT
          + title      = "Project factory delegated IAM grant."
        }
    }

  # module.stage2-folder["security"].google_tags_tag_binding.binding["context"] will be created
  + resource "google_tags_tag_binding" "binding" {
      + id        = (known after apply)
      + name      = (known after apply)
      + parent    = (known after apply)
      + tag_value = (known after apply)
    }

  # module.stage2-folder-env["networking-dev"].google_folder.folder[0] will be created
  + resource "google_folder" "folder" {
      + create_time         = (known after apply)
      + deletion_protection = false
      + display_name        = "Development"
      + folder_id           = (known after apply)
      + id                  = (known after apply)
      + lifecycle_state     = (known after apply)
      + name                = (known after apply)
      + parent              = (known after apply)
    }

  # module.stage2-folder-env["networking-dev"].google_tags_tag_binding.binding["environment"] will be created
  + resource "google_tags_tag_binding" "binding" {
      + id        = (known after apply)
      + name      = (known after apply)
      + parent    = (known after apply)
      + tag_value = (known after apply)
    }

  # module.stage2-folder-env["networking-prod"].google_folder.folder[0] will be created
  + resource "google_folder" "folder" {
      + create_time         = (known after apply)
      + deletion_protection = false
      + display_name        = "Production"
      + folder_id           = (known after apply)
      + id                  = (known after apply)
      + lifecycle_state     = (known after apply)
      + name                = (known after apply)
      + parent              = (known after apply)
    }

  # module.stage2-folder-env["networking-prod"].google_tags_tag_binding.binding["environment"] will be created
  + resource "google_tags_tag_binding" "binding" {
      + id        = (known after apply)
      + name      = (known after apply)
      + parent    = (known after apply)
      + tag_value = (known after apply)
    }

  # module.stage2-sa-ro["networking"].google_project_iam_member.project-roles["ff-pcg-prod-iac-core-0-roles/serviceusage.serviceUsageConsumer"] will be created
  + resource "google_project_iam_member" "project-roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "ff-pcg-prod-iac-core-0"
      + role    = "roles/serviceusage.serviceUsageConsumer"
    }

  # module.stage2-sa-ro["networking"].google_service_account.service_account[0] will be created
  + resource "google_service_account" "service_account" {
      + account_id   = "ff-pcg-prod-resman-net-0r"
      + disabled     = false
      + display_name = "Terraform resman networking service account (read-only)."
      + email        = "ff-pcg-prod-resman-net-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + id           = (known after apply)
      + member       = "serviceAccount:ff-pcg-prod-resman-net-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + name         = (known after apply)
      + project      = "ff-pcg-prod-iac-core-0"
      + unique_id    = (known after apply)
    }

  # module.stage2-sa-ro["networking"].google_service_account_iam_binding.authoritative["roles/iam.serviceAccountTokenCreator"] will be created
  + resource "google_service_account_iam_binding" "authoritative" {
      + etag               = (known after apply)
      + id                 = (known after apply)
      + role               = "roles/iam.serviceAccountTokenCreator"
      + service_account_id = (known after apply)
    }

  # module.stage2-sa-ro["networking"].google_storage_bucket_iam_member.bucket-roles["ff-pcg-prod-iac-core-outputs-0-organizations/512849875460/roles/storageViewer"] will be created
  + resource "google_storage_bucket_iam_member" "bucket-roles" {
      + bucket = "ff-pcg-prod-iac-core-outputs-0"
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = (known after apply)
      + role   = "organizations/512849875460/roles/storageViewer"
    }

  # module.stage2-sa-ro["project-factory"].google_project_iam_member.project-roles["ff-pcg-prod-iac-core-0-roles/serviceusage.serviceUsageConsumer"] will be created
  + resource "google_project_iam_member" "project-roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "ff-pcg-prod-iac-core-0"
      + role    = "roles/serviceusage.serviceUsageConsumer"
    }

  # module.stage2-sa-ro["project-factory"].google_service_account.service_account[0] will be created
  + resource "google_service_account" "service_account" {
      + account_id   = "ff-pcg-prod-resman-pf-0r"
      + disabled     = false
      + display_name = "Terraform resman project-factory service account (read-only)."
      + email        = "ff-pcg-prod-resman-pf-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + id           = (known after apply)
      + member       = "serviceAccount:ff-pcg-prod-resman-pf-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + name         = (known after apply)
      + project      = "ff-pcg-prod-iac-core-0"
      + unique_id    = (known after apply)
    }

  # module.stage2-sa-ro["project-factory"].google_service_account_iam_binding.authoritative["roles/iam.serviceAccountTokenCreator"] will be created
  + resource "google_service_account_iam_binding" "authoritative" {
      + etag               = (known after apply)
      + id                 = (known after apply)
      + role               = "roles/iam.serviceAccountTokenCreator"
      + service_account_id = (known after apply)
    }

  # module.stage2-sa-ro["project-factory"].google_storage_bucket_iam_member.bucket-roles["ff-pcg-prod-iac-core-outputs-0-organizations/512849875460/roles/storageViewer"] will be created
  + resource "google_storage_bucket_iam_member" "bucket-roles" {
      + bucket = "ff-pcg-prod-iac-core-outputs-0"
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = (known after apply)
      + role   = "organizations/512849875460/roles/storageViewer"
    }

  # module.stage2-sa-ro["security"].google_project_iam_member.project-roles["ff-pcg-prod-iac-core-0-roles/serviceusage.serviceUsageConsumer"] will be created
  + resource "google_project_iam_member" "project-roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "ff-pcg-prod-iac-core-0"
      + role    = "roles/serviceusage.serviceUsageConsumer"
    }

  # module.stage2-sa-ro["security"].google_service_account.service_account[0] will be created
  + resource "google_service_account" "service_account" {
      + account_id   = "ff-pcg-prod-resman-sec-0r"
      + disabled     = false
      + display_name = "Terraform resman security service account (read-only)."
      + email        = "ff-pcg-prod-resman-sec-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + id           = (known after apply)
      + member       = "serviceAccount:ff-pcg-prod-resman-sec-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + name         = (known after apply)
      + project      = "ff-pcg-prod-iac-core-0"
      + unique_id    = (known after apply)
    }

  # module.stage2-sa-ro["security"].google_service_account_iam_binding.authoritative["roles/iam.serviceAccountTokenCreator"] will be created
  + resource "google_service_account_iam_binding" "authoritative" {
      + etag               = (known after apply)
      + id                 = (known after apply)
      + role               = "roles/iam.serviceAccountTokenCreator"
      + service_account_id = (known after apply)
    }

  # module.stage2-sa-ro["security"].google_storage_bucket_iam_member.bucket-roles["ff-pcg-prod-iac-core-outputs-0-organizations/512849875460/roles/storageViewer"] will be created
  + resource "google_storage_bucket_iam_member" "bucket-roles" {
      + bucket = "ff-pcg-prod-iac-core-outputs-0"
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = (known after apply)
      + role   = "organizations/512849875460/roles/storageViewer"
    }

  # module.stage2-sa-rw["networking"].google_project_iam_member.project-roles["ff-pcg-prod-iac-core-0-roles/serviceusage.serviceUsageConsumer"] will be created
  + resource "google_project_iam_member" "project-roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "ff-pcg-prod-iac-core-0"
      + role    = "roles/serviceusage.serviceUsageConsumer"
    }

  # module.stage2-sa-rw["networking"].google_service_account.service_account[0] will be created
  + resource "google_service_account" "service_account" {
      + account_id   = "ff-pcg-prod-resman-net-0"
      + disabled     = false
      + display_name = "Terraform resman networking service account."
      + email        = "ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + id           = (known after apply)
      + member       = "serviceAccount:ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + name         = (known after apply)
      + project      = "ff-pcg-prod-iac-core-0"
      + unique_id    = (known after apply)
    }

  # module.stage2-sa-rw["networking"].google_service_account_iam_binding.authoritative["roles/iam.serviceAccountTokenCreator"] will be created
  + resource "google_service_account_iam_binding" "authoritative" {
      + etag               = (known after apply)
      + id                 = (known after apply)
      + role               = "roles/iam.serviceAccountTokenCreator"
      + service_account_id = (known after apply)
    }

  # module.stage2-sa-rw["networking"].google_storage_bucket_iam_member.bucket-roles["ff-pcg-prod-iac-core-outputs-0-roles/storage.objectAdmin"] will be created
  + resource "google_storage_bucket_iam_member" "bucket-roles" {
      + bucket = "ff-pcg-prod-iac-core-outputs-0"
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = (known after apply)
      + role   = "roles/storage.objectAdmin"
    }

  # module.stage2-sa-rw["project-factory"].google_project_iam_member.project-roles["ff-pcg-prod-iac-core-0-roles/serviceusage.serviceUsageConsumer"] will be created
  + resource "google_project_iam_member" "project-roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "ff-pcg-prod-iac-core-0"
      + role    = "roles/serviceusage.serviceUsageConsumer"
    }

  # module.stage2-sa-rw["project-factory"].google_service_account.service_account[0] will be created
  + resource "google_service_account" "service_account" {
      + account_id   = "ff-pcg-prod-resman-pf-0"
      + disabled     = false
      + display_name = "Terraform resman project-factory service account."
      + email        = "ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + id           = (known after apply)
      + member       = "serviceAccount:ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + name         = (known after apply)
      + project      = "ff-pcg-prod-iac-core-0"
      + unique_id    = (known after apply)
    }

  # module.stage2-sa-rw["project-factory"].google_service_account_iam_binding.authoritative["roles/iam.serviceAccountTokenCreator"] will be created
  + resource "google_service_account_iam_binding" "authoritative" {
      + etag               = (known after apply)
      + id                 = (known after apply)
      + role               = "roles/iam.serviceAccountTokenCreator"
      + service_account_id = (known after apply)
    }

  # module.stage2-sa-rw["project-factory"].google_storage_bucket_iam_member.bucket-roles["ff-pcg-prod-iac-core-outputs-0-roles/storage.objectAdmin"] will be created
  + resource "google_storage_bucket_iam_member" "bucket-roles" {
      + bucket = "ff-pcg-prod-iac-core-outputs-0"
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = (known after apply)
      + role   = "roles/storage.objectAdmin"
    }

  # module.stage2-sa-rw["security"].google_project_iam_member.project-roles["ff-pcg-prod-iac-core-0-roles/serviceusage.serviceUsageConsumer"] will be created
  + resource "google_project_iam_member" "project-roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "ff-pcg-prod-iac-core-0"
      + role    = "roles/serviceusage.serviceUsageConsumer"
    }

  # module.stage2-sa-rw["security"].google_service_account.service_account[0] will be created
  + resource "google_service_account" "service_account" {
      + account_id   = "ff-pcg-prod-resman-sec-0"
      + disabled     = false
      + display_name = "Terraform resman security service account."
      + email        = "ff-pcg-prod-resman-sec-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + id           = (known after apply)
      + member       = "serviceAccount:ff-pcg-prod-resman-sec-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + name         = (known after apply)
      + project      = "ff-pcg-prod-iac-core-0"
      + unique_id    = (known after apply)
    }

  # module.stage2-sa-rw["security"].google_service_account_iam_binding.authoritative["roles/iam.serviceAccountTokenCreator"] will be created
  + resource "google_service_account_iam_binding" "authoritative" {
      + etag               = (known after apply)
      + id                 = (known after apply)
      + role               = "roles/iam.serviceAccountTokenCreator"
      + service_account_id = (known after apply)
    }

  # module.stage2-sa-rw["security"].google_storage_bucket_iam_member.bucket-roles["ff-pcg-prod-iac-core-outputs-0-roles/storage.objectAdmin"] will be created
  + resource "google_storage_bucket_iam_member" "bucket-roles" {
      + bucket = "ff-pcg-prod-iac-core-outputs-0"
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = (known after apply)
      + role   = "roles/storage.objectAdmin"
    }

  # module.top-level-bucket["sandbox"].google_storage_bucket.bucket[0] will be created
  + resource "google_storage_bucket" "bucket" {
      + effective_labels            = {
          + "goog-terraform-provisioned" = "true"
        }
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "EU"
      + name                        = "ff-pcg-dev-resman-sbox-0"
      + project                     = "ff-pcg-prod-iac-core-0"
      + project_number              = (known after apply)
      + public_access_prevention    = (known after apply)
      + rpo                         = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + terraform_labels            = {
          + "goog-terraform-provisioned" = "true"
        }
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + soft_delete_policy (known after apply)

      + versioning {
          + enabled = true
        }

      + website (known after apply)
    }

  # module.top-level-bucket["sandbox"].google_storage_bucket_iam_binding.authoritative["roles/storage.objectAdmin"] will be created
  + resource "google_storage_bucket_iam_binding" "authoritative" {
      + bucket  = "ff-pcg-dev-resman-sbox-0"
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-dev-resman-sbox-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/storage.objectAdmin"
    }

  # module.top-level-bucket["sandbox"].google_storage_bucket_iam_binding.authoritative["roles/storage.objectViewer"] will be created
  + resource "google_storage_bucket_iam_binding" "authoritative" {
      + bucket  = "ff-pcg-dev-resman-sbox-0"
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-dev-resman-sbox-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/storage.objectViewer"
    }

  # module.top-level-folder["sandbox"].google_folder.folder[0] will be created
  + resource "google_folder" "folder" {
      + create_time         = (known after apply)
      + deletion_protection = false
      + display_name        = "Sandbox"
      + folder_id           = (known after apply)
      + id                  = (known after apply)
      + lifecycle_state     = (known after apply)
      + name                = (known after apply)
      + parent              = "organizations/512849875460"
    }

  # module.top-level-folder["sandbox"].google_folder_iam_binding.authoritative["roles/owner"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-dev-resman-sbox-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/owner"
    }

  # module.top-level-folder["sandbox"].google_org_policy_policy.default["compute.vmExternalIpAccess"] will be created
  + resource "google_org_policy_policy" "default" {
      + etag   = (known after apply)
      + id     = (known after apply)
      + name   = (known after apply)
      + parent = (known after apply)

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + allow_all = "TRUE"
            }
        }
    }

  # module.top-level-folder["sandbox"].google_org_policy_policy.default["sql.restrictPublicIp"] will be created
  + resource "google_org_policy_policy" "default" {
      + etag   = (known after apply)
      + id     = (known after apply)
      + name   = (known after apply)
      + parent = (known after apply)

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.top-level-folder["sandbox"].google_tags_tag_binding.binding["context"] will be created
  + resource "google_tags_tag_binding" "binding" {
      + id        = (known after apply)
      + name      = (known after apply)
      + parent    = (known after apply)
      + tag_value = (known after apply)
    }

  # module.top-level-folder["teams"].google_folder.folder[0] will be created
  + resource "google_folder" "folder" {
      + create_time         = (known after apply)
      + deletion_protection = false
      + display_name        = "Teams"
      + folder_id           = (known after apply)
      + id                  = (known after apply)
      + lifecycle_state     = (known after apply)
      + name                = (known after apply)
      + parent              = "organizations/512849875460"
    }

  # module.top-level-folder["teams"].google_folder_iam_binding.authoritative["organizations/512849875460/roles/serviceProjectNetworkAdmin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "organizations/512849875460/roles/serviceProjectNetworkAdmin"
    }

  # module.top-level-folder["teams"].google_folder_iam_binding.authoritative["roles/owner"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/owner"
    }

  # module.top-level-folder["teams"].google_folder_iam_binding.authoritative["roles/resourcemanager.folderAdmin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.folderAdmin"
    }

  # module.top-level-folder["teams"].google_folder_iam_binding.authoritative["roles/resourcemanager.folderViewer"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.folderViewer"
    }

  # module.top-level-folder["teams"].google_folder_iam_binding.authoritative["roles/resourcemanager.projectCreator"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.projectCreator"
    }

  # module.top-level-folder["teams"].google_folder_iam_binding.authoritative["roles/resourcemanager.tagUser"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.tagUser"
    }

  # module.top-level-folder["teams"].google_folder_iam_binding.authoritative["roles/resourcemanager.tagViewer"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.tagViewer"
    }

  # module.top-level-folder["teams"].google_folder_iam_binding.authoritative["roles/viewer"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/viewer"
    }

  # module.top-level-folder["teams"].google_folder_iam_binding.bindings["pf_viewer"] will be created
  + resource "google_folder_iam_binding" "bindings" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:ff-pcg-prod-resman-pf-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "organizations/512849875460/roles/organizationAdminViewer"
    }

  # module.top-level-folder["teams"].google_tags_tag_binding.binding["context"] will be created
  + resource "google_tags_tag_binding" "binding" {
      + id        = (known after apply)
      + name      = (known after apply)
      + parent    = (known after apply)
      + tag_value = (known after apply)
    }

  # module.top-level-sa["sandbox"].google_project_iam_member.project-roles["ff-pcg-prod-iac-core-0-roles/serviceusage.serviceUsageConsumer"] will be created
  + resource "google_project_iam_member" "project-roles" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "ff-pcg-prod-iac-core-0"
      + role    = "roles/serviceusage.serviceUsageConsumer"
    }

  # module.top-level-sa["sandbox"].google_service_account.service_account[0] will be created
  + resource "google_service_account" "service_account" {
      + account_id   = "ff-pcg-dev-resman-sbox-0"
      + disabled     = false
      + display_name = "Terraform resman sandbox folder service account."
      + email        = "ff-pcg-dev-resman-sbox-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + id           = (known after apply)
      + member       = "serviceAccount:ff-pcg-dev-resman-sbox-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + name         = (known after apply)
      + project      = "ff-pcg-prod-iac-core-0"
      + unique_id    = (known after apply)
    }

  # module.top-level-sa["sandbox"].google_service_account_iam_binding.authoritative["roles/iam.serviceAccountTokenCreator"] will be created
  + resource "google_service_account_iam_binding" "authoritative" {
      + etag               = (known after apply)
      + id                 = (known after apply)
      + role               = "roles/iam.serviceAccountTokenCreator"
      + service_account_id = (known after apply)
    }

  # module.top-level-sa["sandbox"].google_storage_bucket_iam_member.bucket-roles["ff-pcg-prod-iac-core-outputs-0-roles/storage.objectAdmin"] will be created
  + resource "google_storage_bucket_iam_member" "bucket-roles" {
      + bucket = "ff-pcg-prod-iac-core-outputs-0"
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = (known after apply)
      + role   = "roles/storage.objectAdmin"
    }

Plan: 118 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + cicd_repositories = {}
  + folder_ids        = {
      + networking      = (known after apply)
      + networking-dev  = (known after apply)
      + networking-prod = (known after apply)
      + sandbox         = (known after apply)
      + security        = (known after apply)
      + teams           = (known after apply)
    }
  + providers         = (sensitive value)
  + service_accounts  = {
      + networking-ro      = "ff-pcg-prod-resman-net-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + networking-rw      = "ff-pcg-prod-resman-net-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + project-factory-ro = "ff-pcg-prod-resman-pf-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + project-factory-rw = "ff-pcg-prod-resman-pf-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + sandbox            = "ff-pcg-dev-resman-sbox-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + security-ro        = "ff-pcg-prod-resman-sec-0r@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
      + security-rw        = "ff-pcg-prod-resman-sec-0@ff-pcg-prod-iac-core-0.iam.gserviceaccount.com"
    }
  + tfvars            = (sensitive value)

Warning: Value for undeclared variable

The root module does not declare a variable named "universe" but a value was found in file "0-bootstrap.auto.tfvars.json". If you meant to use this value, add a "variable" block to the configuration.

To silence these warnings, use TF_VAR_... environment variables to provide certain "global" settings to all configurations in your organization. To reduce the verbosity of these warnings, use the
-compact-warnings option.

Warning: Value for undeclared variable

The root module does not declare a variable named "org_policy_tags" but a value was found in file "0-bootstrap.auto.tfvars.json". If you meant to use this value, add a "variable" block to the configuration.

To silence these warnings, use TF_VAR_... environment variables to provide certain "global" settings to all configurations in your organization. To reduce the verbosity of these warnings, use the
-compact-warnings option.

Warning: Values for undeclared variables

In addition to the other similar warnings shown, 1 other variable(s) defined without being declared.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
